{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"shoal","text":"<p>Opinionated CLI Task Runner built on Invoke</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p><code>poetry add</code></p> </li> <li> <p>\u2026</p> <pre><code>import\n\n# &lt; TODO: Add example code here &gt;\n</code></pre> </li> <li> <p>\u2026</p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>For more example code, see the scripts directory or the tests.</p>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/Advanced_Documentation/","title":"Docs","text":"<p>Developer documentation</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>add type annotations and fix linting issues</li> <li>upgrade to calcipy v1 with copier</li> </ul>"},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>use regex for commitizen versioning</li> <li>remove pyright venvPath</li> <li>don\u2019t remove binary name from sys.argv. Run calcipy!</li> <li>default verbose should be 1</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>resolve type errors</li> </ul>"},{"location":"docs/CHANGELOG/#060-2023-02-20","title":"0.6.0 (2023-02-20)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>support working-dir</li> <li>add logger.print and print_debug</li> </ul>"},{"location":"docs/CHANGELOG/#051-2023-02-19","title":"0.5.1 (2023-02-19)","text":""},{"location":"docs/CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>correct return from can_skip &amp; one-line summary</li> </ul>"},{"location":"docs/CHANGELOG/#050-2023-02-18","title":"0.5.0 (2023-02-18)","text":""},{"location":"docs/CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>correct mtime comparison in can_skip</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>remove shoaling/tangs and top-level imports</li> </ul>"},{"location":"docs/CHANGELOG/#041-2023-02-17","title":"0.4.1 (2023-02-17)","text":""},{"location":"docs/CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>can_skip, logging, and type cli.task</li> </ul>"},{"location":"docs/CHANGELOG/#040-2023-02-17","title":"0.4.0 (2023-02-17)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>wrap the invoke task</li> <li>add invoke program wrappers from Calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>use prerequisites for consistency</li> </ul>"},{"location":"docs/CHANGELOG/#030-2023-02-09","title":"0.3.0 (2023-02-09)","text":""},{"location":"docs/CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>add pretty_process</li> <li>add can_skip from calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>add missing configure_logger</li> </ul>"},{"location":"docs/CHANGELOG/#021-2023-02-08","title":"0.2.1 (2023-02-08)","text":""},{"location":"docs/CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>remove dependency on calcipy, reduce public interface, and more log-like</li> </ul>"},{"location":"docs/CHANGELOG/#020-2023-02-07","title":"0.2.0 (2023-02-07)","text":""},{"location":"docs/CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>add debug logging</li> <li>add intermediary pydantic model for argparser</li> <li>add logger</li> <li>add register_fun</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>reorganize and add a timeout</li> </ul>"},{"location":"docs/CHANGELOG/#010-2023-02-06","title":"0.1.0 (2023-02-06)","text":""},{"location":"docs/CHANGELOG/#feat_5","title":"Feat","text":"<ul> <li>finish first proof of concept</li> <li>initialize Tang model</li> <li>initialize with copier</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>run doit against all files</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File TODO https://github.com/pappasam/toml-sort/issues/42 2023-02-21 .pre-commit-config.yaml:73 TODO Add example code here &gt; 2023-02-20 docs/README.md:14 TODO Show an example (screenshots, terminal recording, etc.) &gt; \u2013&gt; 2023-02-20 docs/README.md:21 PLANNED Pending inclusion in calcipy[lint]\u2026 2023-02-21 pyproject.toml:39 PLANNED When can this be True? 2023-02-21 shoal/cli.py:65 FIXME Remove after upgrading calcipy 2023-02-21 shoal/log.py:123 FIXME Remove after upgrading calcipy 2023-02-21 shoal/log.py:128 TODO See below link for other options for chunking 2023-02-17 shoal/pretty_process.py:39 PLANNED Move to the shared package 2023-02-20 tests/test_zz_shoal.py:7 <p>Found code tags for FIXME (2), TODO (4), PLANNED (3)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/shoal.git\ncd shoal\npoetry install --sync\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>shoal/__init__.py</code> 7 0 0 100.0% <code>shoal/can_skip.py</code> 19 3 0 84.2% <code>shoal/cli.py</code> 80 80 0 0.0% <code>shoal/invoke_helpers.py</code> 20 20 0 0.0% <code>shoal/log.py</code> 85 20 0 76.5% <code>shoal/pretty_process.py</code> 59 59 0 0.0% <code>shoal/shell.py</code> 34 5 0 85.3% Totals 304 187 0 38.5% <p>Generated on: 2023-02-21</p>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types<ul> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> </ul> </li> <li>Scopes<ul> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> </ul> </li> <li>Tips<ul> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines<ul> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> </ul> </li> <li>How to write a good commit message<ul> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li> <ol> <li>Try for 50 characters, but consider 72 the hard limit</li> </ol> </li> <li> <ol> <li>Use the body to explain what and why vs. how</li> </ol> </li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see labels.yml</li> <li>Milestones<ul> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> </li> </ul> Research <ul> <li>[Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<p>TODO: Revisit</p> <ul> <li>Git: The Simple Guide</li> <li>Commit Messages and why use the present tense</li> <li>Github\u2019s Advice on Github</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)<ul> <li>Bash Tab-Completion Snippet</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<p>TODO: Revisit</p> <ul> <li>Python Style Guides<ul> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<p>TODO: Revisit</p> <ul> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/shoal/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/shoal/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/shoal/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>shoal     * can_skip     * cli     * invoke_helpers     * log     * pretty_process     * shell</li> </ul>"},{"location":"reference/shoal/","title":"shoal","text":"<p>shoal.</p>"},{"location":"reference/shoal/can_skip/","title":"can_skip","text":"<p>Support can-skip logic from Make.</p>"},{"location":"reference/shoal/can_skip/#shoal.can_skip-functions","title":"Functions","text":""},{"location":"reference/shoal/can_skip/#shoal.can_skip.can_skip","title":"can_skip","text":"<pre><code>can_skip(*, prerequisites, targets)\n</code></pre> <p>Generic make-style task skipping logic based on file <code>mtime</code>.</p> <p>Example use with Invoke, but can be used anywhere:</p> <pre><code>@task\ndef test(ctx: Context) -&gt; None:\nif can_skip(prerequisites=[*Path('src').rglob('*.py')], targets=[Path('.coverage.xml')]):\nreturn  # Exit early\n...  # Task code\n</code></pre> Source code in <code>shoal/can_skip.py</code> <pre><code>@beartype\ndef can_skip(*, prerequisites: List[Path], targets: List[Path]) -&gt; bool:\n\"\"\"Generic make-style task skipping logic based on file `mtime`.\n    Example use with Invoke, but can be used anywhere:\n    ```py\n    @task\n    def test(ctx: Context) -&gt; None:\n        if can_skip(prerequisites=[*Path('src').rglob('*.py')], targets=[Path('.coverage.xml')]):\n            return  # Exit early\n        ...  # Task code\n    ```\n    \"\"\"\nts_prerequisites = [pth.stat().st_mtime for pth in prerequisites]\nif not ts_prerequisites:\nraise ValueError('Required files do not exist', prerequisites)\nts_targets = [pth.stat().st_mtime for pth in targets]\nif ts_targets and min(ts_targets) &gt; max(ts_prerequisites):\nlogger.warning('Skipping because targets are newer', targets=targets)\nreturn True\nreturn False\n</code></pre>"},{"location":"reference/shoal/can_skip/#shoal.can_skip.dont_skip","title":"dont_skip","text":"<pre><code>dont_skip(*, prerequisites, targets)\n</code></pre> <p>To use for testing with mock; always returns False.</p> Source code in <code>shoal/can_skip.py</code> <pre><code>@beartype\ndef dont_skip(*, prerequisites: List[Path], targets: List[Path]) -&gt; bool:\n\"\"\"To use for testing with mock; always returns False.\"\"\"\nlogger.debug('Mocking can_skip', prerequisites=prerequisites, targets=targets)\nreturn False\n</code></pre>"},{"location":"reference/shoal/cli/","title":"cli","text":"<p>Extend Invoke for Calcipy.</p>"},{"location":"reference/shoal/cli/#shoal.cli-classes","title":"Classes","text":""},{"location":"reference/shoal/cli/#shoal.cli.GlobalTaskOptions","title":"GlobalTaskOptions","text":"<p>         Bases: <code>BaseModel</code></p> <p>Global Task Options.</p> Source code in <code>shoal/cli.py</code> <pre><code>class GlobalTaskOptions(BaseModel):\n\"\"\"Global Task Options.\"\"\"\nworking_dir: Path = Field(default_factory=Path.cwd)\n\"\"\"Working directory for the program to use globally.\"\"\"\nfile_args: List[Path] = Field(default_factory=list)\n\"\"\"List of Paths to modify.\"\"\"\nverbose: PositiveInt = Field(default=1, lte=3)\n\"\"\"Verbosity level.\"\"\"\n</code></pre>"},{"location":"reference/shoal/cli/#shoal.cli.GlobalTaskOptions-attributes","title":"Attributes","text":""},{"location":"reference/shoal/cli/#shoal.cli.GlobalTaskOptions.file_args","title":"file_args  <code>class-attribute</code>","text":"<pre><code>file_args: List[Path] = Field(default_factory=list)\n</code></pre> <p>List of Paths to modify.</p>"},{"location":"reference/shoal/cli/#shoal.cli.GlobalTaskOptions.verbose","title":"verbose  <code>class-attribute</code>","text":"<pre><code>verbose: PositiveInt = Field(default=1, lte=3)\n</code></pre> <p>Verbosity level.</p>"},{"location":"reference/shoal/cli/#shoal.cli.GlobalTaskOptions.working_dir","title":"working_dir  <code>class-attribute</code>","text":"<pre><code>working_dir: Path = Field(default_factory=Path.cwd)\n</code></pre> <p>Working directory for the program to use globally.</p>"},{"location":"reference/shoal/cli/#shoal.cli.ShoalConfig","title":"ShoalConfig","text":"<p>         Bases: <code>Config</code></p> <p>Opinionated Config with better defaults.</p> Source code in <code>shoal/cli.py</code> <pre><code>class ShoalConfig(Config):  # type: ignore[misc]\n\"\"\"Opinionated Config with better defaults.\"\"\"\n@staticmethod\ndef global_defaults() -&gt; Dict:  # type: ignore[type-arg]\n\"\"\"Override the global defaults.\"\"\"\ninvoke_defaults = Config.global_defaults()\nshoal_defaults = {\n'run': {\n'asynchronous': False,  # PLANNED: When can this be True?\n'echo': True,\n'echo_format': '\\033[2;3;37mRunning: {command}\\033[0m',\n'pty': use_pty(),\n},\n}\nreturn merge_dicts(invoke_defaults, shoal_defaults)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/shoal/cli/#shoal.cli.ShoalConfig-functions","title":"Functions","text":""},{"location":"reference/shoal/cli/#shoal.cli.ShoalConfig.global_defaults","title":"global_defaults  <code>staticmethod</code>","text":"<pre><code>global_defaults()\n</code></pre> <p>Override the global defaults.</p> Source code in <code>shoal/cli.py</code> <pre><code>@staticmethod\ndef global_defaults() -&gt; Dict:  # type: ignore[type-arg]\n\"\"\"Override the global defaults.\"\"\"\ninvoke_defaults = Config.global_defaults()\nshoal_defaults = {\n'run': {\n'asynchronous': False,  # PLANNED: When can this be True?\n'echo': True,\n'echo_format': '\\033[2;3;37mRunning: {command}\\033[0m',\n'pty': use_pty(),\n},\n}\nreturn merge_dicts(invoke_defaults, shoal_defaults)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/shoal/cli/#shoal.cli-functions","title":"Functions","text":""},{"location":"reference/shoal/cli/#shoal.cli.start_program","title":"start_program","text":"<pre><code>start_program(pkg_name, pkg_version, module)\n</code></pre> <p>Run the customized Invoke Program.</p> <p>FYI: recommendation is to extend the <code>core_args</code> method, but this won\u2019t parse positional arguments: https://docs.pyinvoke.org/en/stable/concepts/library.html#modifying-core-parser-arguments</p> Source code in <code>shoal/cli.py</code> <pre><code>@beartype\ndef start_program(pkg_name: str, pkg_version: str, module: ModuleType) -&gt; None:\n\"\"\"Run the customized Invoke Program.\n    FYI: recommendation is to extend the `core_args` method, but this won't parse positional arguments:\n    https://docs.pyinvoke.org/en/stable/concepts/library.html#modifying-core-parser-arguments\n    \"\"\"\n# Manipulate 'sys.argv' to hide arguments that invoke can't parse\n_gto = GlobalTaskOptions()\nsys_argv: List[str] = sys.argv[:1]\nlast_argv = ''\nfor argv in sys.argv[1:]:\nif not last_argv.startswith('-') and Path(argv).is_file():\n_gto.file_args.append(Path(argv))\nelif argv in {'-v', '-vv', '-vvv', '--verbose'}:\n_gto.verbose = argv.count('v')\nelif last_argv in {'--working-dir'}:\n_gto.working_dir = Path(argv).resolve()\nelif argv not in {'--working-dir'}:\nsys_argv.append(argv)\nlast_argv = argv\n_gto.file_args = [\n_f if _f.is_absolute() else Path.cwd() / _f\nfor _f in _gto.file_args\n]\nsys.argv = sys_argv\nclass _ShoalConfig(ShoalConfig):\ngto: GlobalTaskOptions = _gto\n_ShoalProgram(\nname=pkg_name,\nversion=pkg_version,\nnamespace=Collection.from_module(module),\nconfig_class=_ShoalConfig,\n).run()\n</code></pre>"},{"location":"reference/shoal/cli/#shoal.cli.task","title":"task","text":"<pre><code>task(*task_args, **task_kwargs)\n</code></pre> <p>Wrapper to accept arguments for an invoke task.</p> Source code in <code>shoal/cli.py</code> <pre><code>@beartype\ndef task(*task_args: Any, **task_kwargs: Any) -&gt; Callable[[Any], Task]:\n\"\"\"Wrapper to accept arguments for an invoke task.\"\"\"\n@beartype\ndef wrapper(func: Any) -&gt; Task:  # noqa: ANN001\n\"\"\"Wraps the decorated task.\"\"\"\n@invoke_task(*task_args, **task_kwargs)  # type: ignore[misc]\n@beartype\n@wraps(func)\ndef inner(ctx: Context, *args: Any, **kwargs: Any) -&gt; Task:\n\"\"\"Wrap the task with settings configured in `gto` for working_dir and logging.\"\"\"\ntry:\nctx.config.gto\nexcept AttributeError:\nctx.config.gto = GlobalTaskOptions()\nos.chdir(ctx.config.gto.working_dir)\nverbose = ctx.config.gto.verbose\nlog_lookup = {3: logging.NOTSET, 2: logging.DEBUG, 1: logging.INFO, 0: logging.WARNING}\nraw_log_level = log_lookup.get(verbose)\nconfigure_logger(log_level=logging.ERROR if raw_log_level is None else raw_log_level)\nsummary = func.__doc__.split('\\n')[0]\nlogger.text(f'Running {func.__name__}', is_header=True, summary=summary)\nlogger.text_debug('With task arguments', args=args, kwargs=kwargs)\nresult = func(ctx, *args, **kwargs)\nlogger.text_debug(f'Completed {func.__name__}', result=result)\nreturn result\nreturn inner\nreturn wrapper\n</code></pre>"},{"location":"reference/shoal/invoke_helpers/","title":"invoke_helpers","text":"<p>Invoke Helpers.</p>"},{"location":"reference/shoal/invoke_helpers/#shoal.invoke_helpers-functions","title":"Functions","text":""},{"location":"reference/shoal/invoke_helpers/#shoal.invoke_helpers.run","title":"run","text":"<pre><code>run(ctx, *run_args, **run_kwargs)\n</code></pre> <p>Wrap invoke.run to run within the <code>working_dir</code>.</p> Source code in <code>shoal/invoke_helpers.py</code> <pre><code>@beartype\ndef run(ctx: Context, *run_args: Any, **run_kwargs: Any) -&gt; Result:\n\"\"\"Wrap invoke.run to run within the `working_dir`.\"\"\"\nworking_dir = '.'\nwith suppress(AttributeError):\nworking_dir = ctx.config.gto.working_dir\nwith ctx.cd(working_dir):\nreturn ctx.run(*run_args, **run_kwargs)\n</code></pre>"},{"location":"reference/shoal/invoke_helpers/#shoal.invoke_helpers.use_pty","title":"use_pty  <code>cached</code>","text":"<pre><code>use_pty()\n</code></pre> <p>Returns False on Windows and some CI environments.</p> Source code in <code>shoal/invoke_helpers.py</code> <pre><code>@lru_cache(maxsize=1)\n@beartype\ndef use_pty() -&gt; bool:\n\"\"\"Returns False on Windows and some CI environments.\"\"\"\nif platform.system() == 'Windows':\nreturn False\nreturn not environ.get('GITHUB_ACTION')\n</code></pre>"},{"location":"reference/shoal/log/","title":"log","text":"<p>Log.</p>"},{"location":"reference/shoal/log/#shoal.log-functions","title":"Functions","text":""},{"location":"reference/shoal/log/#shoal.log.configure_logger","title":"configure_logger","text":"<pre><code>configure_logger(log_level=_DEF_LEVEL)\n</code></pre> <p>Configure global logger.</p> Source code in <code>shoal/log.py</code> <pre><code>@beartype\ndef configure_logger(log_level: int = _DEF_LEVEL) -&gt; None:\n\"\"\"Configure global logger.\"\"\"\n_LOG_SINGLETON.log = partial(_log, _log_level=log_level, _console=Console())\n</code></pre>"},{"location":"reference/shoal/log/#shoal.log.get_logger","title":"get_logger","text":"<pre><code>get_logger()\n</code></pre> <p>Retrieve global logger.</p> Source code in <code>shoal/log.py</code> <pre><code>@beartype\ndef get_logger() -&gt; _Logger:\n\"\"\"Retrieve global logger.\"\"\"\nreturn _Logger()\n</code></pre>"},{"location":"reference/shoal/pretty_process/","title":"pretty_process","text":"<p>Track delegated processes with rich progress meters.</p> <p>Based on: https://www.deanmontgomery.com/2022/03/24/rich-progress-and-multiprocessing</p>"},{"location":"reference/shoal/pretty_process/#shoal.pretty_process-functions","title":"Functions","text":""},{"location":"reference/shoal/pretty_process/#shoal.pretty_process.__long_task","title":"__long_task","text":"<pre><code>__long_task(*, task_id, shared_progress, data)\n</code></pre> <p>Example long task.</p> Source code in <code>shoal/pretty_process.py</code> <pre><code>def __long_task(*, task_id: int, shared_progress: DictProxy, data: List[_ItemT]) -&gt; Any:  # type: ignore[type-arg]\n\"\"\"Example long task.\"\"\"\nfor _val in data:\nsleep(1)\nshared_progress[task_id] += 1\nreturn True\n</code></pre>"},{"location":"reference/shoal/pretty_process/#shoal.pretty_process.pretty_process","title":"pretty_process","text":"<pre><code>pretty_process(delegated_task, *, data, num_workers=3)\n</code></pre> <p>Run a task in parallel to process all provided data.</p> <p>Uses <code>rich</code> to display pretty progress bars</p> PARAMETER DESCRIPTION <code>delegated_task</code> <p>must call <code>shared_progress[task_id] += 1</code> on each item in data</p> <p> TYPE: <code>_DelegatedTask</code> </p> <code>data</code> <p>the list of data to distribute</p> <p> TYPE: <code>List[_ItemT]</code> </p> <code>num_workers</code> <p>number of worker processes</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> Source code in <code>shoal/pretty_process.py</code> <pre><code>@beartype\ndef pretty_process(delegated_task: _DelegatedTask, *, data: List[_ItemT], num_workers: int = 3) -&gt; Any:\n\"\"\"Run a task in parallel to process all provided data.\n    Uses `rich` to display pretty progress bars\n    Args:\n        delegated_task: must call `shared_progress[task_id] += 1` on each item in data\n        data: the list of data to distribute\n        num_workers: number of worker processes\n    \"\"\"\n# Docs: https://rich.readthedocs.io/en/latest/progress.html\ncolumns: List[Union[str, ProgressColumn]] = [\n'[progress.description]{task.description}',\nBarColumn(),\n'[progress.percentage]{task.percentage:&gt;3.0f}%',\nTimeRemainingColumn(),\nTimeElapsedColumn(),\n]\nwith Progress(*columns, refresh_per_second=1) as progress:  # noqa: SIM117 (Py&gt;3.9)\n# Share state between process and workers\nwith multiprocessing.Manager() as manager:\nshared_progress = manager.dict()\njobs = []\ntotals = {}\ntask_id_all = progress.add_task('[green]All jobs progress:')\nwith ProcessPoolExecutor(max_workers=num_workers) as executor:\nfor ix, chunk in enumerate(_chunked(data, count=num_cpus)):\ntask_id = progress.add_task(f'task {ix}')\nshared_progress[task_id] = 0\ntotals[task_id] = len(chunk)\njobs.append(executor.submit(\ndelegated_task, task_id=task_id, shared_progress=shared_progress, data=chunk,\n))\n# Update progress bar from shared state\nremaining = len(jobs)\nwhile remaining:\nn_done = 0\nfor task_id, latest in shared_progress.items():\nn_done += latest\nprogress.update(task_id, completed=latest, total=totals[task_id])\nprogress.update(task_id_all, completed=n_done, total=len(data))\nremaining = len(jobs) - sum(job.done() for job in jobs)\n# Collect results and catch and errors\nreturn [job.result() for job in jobs]\n</code></pre>"},{"location":"reference/shoal/shell/","title":"shell","text":"<p>Run shell commands.</p>"},{"location":"reference/shoal/shell/#shoal.shell-functions","title":"Functions","text":""},{"location":"reference/shoal/shell/#shoal.shell.capture_shell","title":"capture_shell","text":"<pre><code>capture_shell(cmd, *, timeout=120, cwd=None, printer=None)\n</code></pre> <p>Run shell command and return the output.</p> <p>Inspired by: https://stackoverflow.com/a/38745040/3219667</p> PARAMETER DESCRIPTION <code>cmd</code> <p>shell command</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>process timeout. Defaults to 2 minutes</p> <p> TYPE: <code>int</code> DEFAULT: <code>120</code> </p> <code>cwd</code> <p>optional path for shell execution</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> <code>printer</code> <p>optional callable to output the lines in real time</p> <p> TYPE: <code>Optional[Callable[[str], None]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>stripped output</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>CalledProcessError</code> <p>if return code is non-zero</p> Source code in <code>shoal/shell.py</code> <pre><code>@beartype\ndef capture_shell(\ncmd: str, *, timeout: int = 120, cwd: Optional[Path] = None, printer: Optional[Callable[[str], None]] = None,\n) -&gt; str:\n\"\"\"Run shell command and return the output.\n    Inspired by: https://stackoverflow.com/a/38745040/3219667\n    Args:\n        cmd: shell command\n        timeout: process timeout. Defaults to 2 minutes\n        cwd: optional path for shell execution\n        printer: optional callable to output the lines in real time\n    Returns:\n        str: stripped output\n    Raises:\n        CalledProcessError: if return code is non-zero\n    \"\"\"\nlogger.debug('Running', cmd=cmd, timeout=timeout, cwd=cwd, printer=printer)\nstart = time()\nlines = []\nwith subprocess.Popen(  # noqa: DUO116  # nosec  # nosemgrep\ncmd, cwd=cwd,\nstdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True,\nshell=True,  # noqa: S602\n) as proc:\nstdout: BufferedReader = proc.stdout  # type: ignore[assignment]\nreturn_code = None\nwhile return_code is None:\nif timeout != 0 and time() - start &gt;= timeout:\nproc.kill()\nbreak\nif line := stdout.readline():\nlines.append(line)\nif printer:\nprinter(line.rstrip())  # type: ignore[arg-type]\nelse:\nreturn_code = proc.poll()\noutput = ''.join(lines)  # type: ignore[arg-type]\nif return_code != 0:\nraise subprocess.CalledProcessError(returncode=return_code or 404, cmd=cmd, output=output)\nreturn output\n</code></pre>"},{"location":"reference/shoal/shell/#shoal.shell.run_shell","title":"run_shell","text":"<pre><code>run_shell(cmd, *, timeout=120, cwd=None)\n</code></pre> <p>Run shell command with buffering output.</p> PARAMETER DESCRIPTION <code>cmd</code> <p>shell command</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>process timeout. Defaults to 2 minutes</p> <p> TYPE: <code>int</code> DEFAULT: <code>120</code> </p> <code>cwd</code> <p>optional path for shell execution</p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>CalledProcessError</code> <p>if return code is non-zero</p> Source code in <code>shoal/shell.py</code> <pre><code>@beartype\ndef run_shell(cmd: str, *, timeout: int = 120, cwd: Optional[Path] = None) -&gt; None:\n\"\"\"Run shell command with buffering output.\n    Args:\n        cmd: shell command\n        timeout: process timeout. Defaults to 2 minutes\n        cwd: optional path for shell execution\n    Raises:\n        CalledProcessError: if return code is non-zero\n    \"\"\"\nlogger.debug('Running', cmd=cmd, timeout=timeout, cwd=cwd)\nsubprocess.run(\ncmd, timeout=timeout or None, cwd=cwd,\nstdout=sys.stdout, stderr=sys.stderr, check=True,\nshell=True,  # noqa: DUO116,S602  # nosec  # nosemgrep\n)\n</code></pre>"}]}