{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"shoal","text":"<p>Experimental tasks that extends calcipy\u2019s functionality</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li><code>pipx install shoal</code></li> <li><code>shoal --help</code></li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>For more example code, see the scripts directory or the tests.</p>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/Advanced_Documentation/","title":"Docs","text":"<p>Developer documentation</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>absorb the gh-ops/dev-boards repository code</li> <li>clear out legacy shoal code</li> </ul>"},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>resolve breaking changes in Textual</li> <li>resolve issues post-merge of dev-boards</li> <li>final commit. Moving all logic into calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#100rc0-2023-02-21","title":"1.0.0rc0 (2023-02-21)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>add type annotations and fix linting issues</li> <li>upgrade to calcipy v1 with copier</li> </ul>"},{"location":"docs/CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>use regex for commitizen versioning</li> <li>remove pyright venvPath</li> <li>don\u2019t remove binary name from sys.argv. Run calcipy!</li> <li>default verbose should be 1</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>rename shell( to run_shell( and update docs</li> <li>resolve type errors</li> </ul>"},{"location":"docs/CHANGELOG/#060-2023-02-20","title":"0.6.0 (2023-02-20)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>support working-dir</li> <li>add logger.print and print_debug</li> </ul>"},{"location":"docs/CHANGELOG/#051-2023-02-19","title":"0.5.1 (2023-02-19)","text":""},{"location":"docs/CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>correct return from can_skip &amp; one-line summary</li> </ul>"},{"location":"docs/CHANGELOG/#050-2023-02-18","title":"0.5.0 (2023-02-18)","text":""},{"location":"docs/CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>correct mtime comparison in can_skip</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>remove shoaling/tangs and top-level imports</li> </ul>"},{"location":"docs/CHANGELOG/#041-2023-02-17","title":"0.4.1 (2023-02-17)","text":""},{"location":"docs/CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>can_skip, logging, and type cli.task</li> </ul>"},{"location":"docs/CHANGELOG/#040-2023-02-17","title":"0.4.0 (2023-02-17)","text":""},{"location":"docs/CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>wrap the invoke task</li> <li>add invoke program wrappers from Calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>use prerequisites for consistency</li> </ul>"},{"location":"docs/CHANGELOG/#030-2023-02-09","title":"0.3.0 (2023-02-09)","text":""},{"location":"docs/CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>add pretty_process</li> <li>add can_skip from calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>add missing configure_logger</li> </ul>"},{"location":"docs/CHANGELOG/#021-2023-02-08","title":"0.2.1 (2023-02-08)","text":""},{"location":"docs/CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>remove dependency on calcipy, reduce public interface, and more log-like</li> </ul>"},{"location":"docs/CHANGELOG/#020-2023-02-07","title":"0.2.0 (2023-02-07)","text":""},{"location":"docs/CHANGELOG/#feat_5","title":"Feat","text":"<ul> <li>add debug logging</li> <li>add intermediary pydantic model for argparser</li> <li>add logger</li> <li>add register_fun</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>reorganize and add a timeout</li> </ul>"},{"location":"docs/CHANGELOG/#010-2023-02-06","title":"0.1.0 (2023-02-06)","text":""},{"location":"docs/CHANGELOG/#feat_6","title":"Feat","text":"<ul> <li>finish first proof of concept</li> <li>initialize Tang model</li> <li>initialize with copier</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>run doit against all files</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File TODO Show an example (screenshots, terminal recording, etc.) &gt; \u2013&gt; 2023-02-20 docs/README.md:12 TODO Implement \u2013&gt; 2023-06-23 shoal/dev_boards/actions/README.md:5 PLANNED Reduce the non-gh-ops output from Invoke 2023-06-23 shoal/dev_boards/cli.py:11 FIXME Rename to more general \u2018GitOps UI\u2019? 2023-06-23 shoal/dev_boards/merge/init.py:1 FIXME move to screens/widgets 2023-06-23 shoal/dev_boards/merge/init.py:2 TODO Add a Settings page 2023-06-23 shoal/dev_boards/merge/init.py:3 PLANNED Add question mark for a help menu 2023-06-23 shoal/dev_boards/merge/app.py:117 <p>Found code tags for FIXME (2), TODO (3), PLANNED (2)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/shoal.git\ncd shoal\npoetry install --sync\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>shoal/__init__.py</code> 17 0 17 100.0% <code>shoal/dev_boards/__init__.py</code> 2 2 0 0.0% <code>shoal/dev_boards/cli.py</code> 6 6 3 0.0% <code>shoal/dev_boards/merge/__init__.py</code> 0 0 0 100.0% <code>shoal/dev_boards/merge/app.py</code> 74 74 0 0.0% <code>shoal/dev_boards/merge/config.py</code> 10 10 0 0.0% <code>shoal/dev_boards/merge/gh_wrapper.py</code> 59 59 0 0.0% <code>shoal/dev_boards/scripts.py</code> 4 4 4 0.0% <code>shoal/dev_boards/tasks/__init__.py</code> 0 0 0 100.0% <code>shoal/dev_boards/tasks/all_tasks.py</code> 6 6 0 0.0% <code>shoal/scripts.py</code> 5 5 0 0.0% Totals 183 166 24 7.6% <p>Generated on: 2023-12-16</p>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types</li> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> <li>Scopes</li> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> <li>Tips</li> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines</li> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> <li>How to write a good commit message</li> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li> <ol> <li>Try for 50 characters, but consider 72 the hard limit</li> </ol> </li> <li> <ol> <li>Use the body to explain what and why vs. how</li> </ol> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see labels.yml</li> <li>Milestones</li> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> Research <ul> <li>[Sane GitHub Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<ul> <li>Git: The Simple Guide</li> <li>Commit Messages and why use the present tense</li> <li>GitHub\u2019s Advice on GitHub</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)</li> <li>Bash Tab-Completion Snippet</li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<ul> <li>Python Style Guides</li> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<ul> <li>ADR Approaches<ul> <li>https://infraeng.dev/tech-spec Template (And associated review) vs. https://infraeng.dev/decision-log/</li> <li>Y-Statements: abbreviated shorthand. Add this as a one-line decision option if a full ADR isn\u2019t needed (or when referencing an existing ADR) (https://scribe.rip/@docsoc/y-statements-10eb07b5a177)</li> <li>https://adr.github.io</li> <li>More formal implementation of ADRs (MADR) that this is based on. Template: https://github.com/adr/madr/blob/97fb8edec60b8dc70b8166ef62de34c4e26b46c0/template/adr-template.md</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-5639.md</li> </ul> </li> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> <li>https://github.com/arachne-framework/architecture/blob/060a956277a5ad71df93da49fee52463408841af/adr-002-configuration.md</li> <li>https://github.com/arachne-framework/architecture/tree/060a956277a5ad71df93da49fee52463408841af</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-1010.md</li> <li>https://docs-v1.prefect.io/core/pins/pin-01-introduce-pins.html</li> <li>https://peps.python.org/pep-0387/</li> <li>https://github.com/AICoE/aicoe-ci/blob/39de02af86a0d1f9dcd395fa88b858f1c6880411/docs/adr/0000-use-markdown-architectural-decision-records.md</li> <li>And many others!</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/shoal/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/shoal/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/shoal/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>shoal<ul> <li>dev_boards<ul> <li>cli</li> <li>merge<ul> <li>app</li> <li>config</li> <li>gh_wrapper</li> </ul> </li> <li>scripts</li> <li>tasks<ul> <li>all_tasks</li> </ul> </li> </ul> </li> <li>scripts</li> </ul> </li> </ul>"},{"location":"reference/shoal/","title":"shoal","text":"<p>shoal.</p>"},{"location":"reference/shoal/#shoal-functions","title":"Functions","text":""},{"location":"reference/shoal/#shoal.configure_runtime_type_checking_mode","title":"configure_runtime_type_checking_mode","text":"<pre><code>configure_runtime_type_checking_mode()\n</code></pre> <p>Optionally configure runtime type checking mode globally.</p> Source code in <code>shoal/__init__.py</code> <pre><code>def configure_runtime_type_checking_mode() -&gt; None:  # pragma: no cover\n    \"\"\"Optionally configure runtime type checking mode globally.\"\"\"\n    rtc_mode = _RuntimeTypeCheckingModes.from_environment()\n\n    if rtc_mode is not _RuntimeTypeCheckingModes.OFF:\n        from beartype.roar import BeartypeClawDecorWarning  # noqa: PLC0415\n\n        beartype_this_package(conf=BeartypeConf(\n            warning_cls_on_decorator_exception=(\n                None if rtc_mode is _RuntimeTypeCheckingModes.ERROR else BeartypeClawDecorWarning\n            ),\n        ))\n</code></pre>"},{"location":"reference/shoal/scripts/","title":"scripts","text":"<p>Start the command line program.</p>"},{"location":"reference/shoal/scripts/#shoal.scripts-functions","title":"Functions","text":""},{"location":"reference/shoal/scripts/#shoal.scripts.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Run the customized Invoke Program.</p> Source code in <code>shoal/scripts.py</code> <pre><code>def start() -&gt; None:\n    \"\"\"Run the customized Invoke Program.\"\"\"\n    from calcipy.cli import start_program  # noqa: PLC0415\n    from calcipy.tasks import all_tasks  # noqa: PLC0415\n    start_program(__pkg_name__, __version__, all_tasks)\n</code></pre>"},{"location":"reference/shoal/dev_boards/","title":"dev_boards","text":"<p>dev_boards.</p>"},{"location":"reference/shoal/dev_boards/cli/","title":"cli","text":"<p>Extend Invoke for gh-ops.</p>"},{"location":"reference/shoal/dev_boards/cli/#shoal.dev_boards.cli-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/cli/#shoal.dev_boards.cli.start_program","title":"start_program","text":"<pre><code>start_program(pkg_name, pkg_version, module=None, collection=None)\n</code></pre> <p>Run the customized Invoke Program.</p> Source code in <code>shoal/dev_boards/cli.py</code> <pre><code>@beartype\ndef start_program(  # pragma: no cover\n    pkg_name: str,\n    pkg_version: str,\n    module: Optional[ModuleType] | None = None,\n    collection: Optional[Collection] | None = None,\n) -&gt; None:\n    \"\"\"Run the customized Invoke Program.\"\"\"\n    Program(\n        name=pkg_name,\n        version=pkg_version,\n        namespace=Collection.from_module(module) if module else collection,\n    ).run()\n</code></pre>"},{"location":"reference/shoal/dev_boards/scripts/","title":"scripts","text":"<p>Start the command line program.</p>"},{"location":"reference/shoal/dev_boards/scripts/#shoal.dev_boards.scripts-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/scripts/#shoal.dev_boards.scripts.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Run the customized Invoke Program.</p> Source code in <code>shoal/dev_boards/scripts.py</code> <pre><code>@beartype\ndef start() -&gt; None:  # pragma: no cover\n    \"\"\"Run the customized Invoke Program.\"\"\"\n    from .tasks import all_tasks  # noqa: PLC0415\n    start_program(__pkg_name__, __version__, all_tasks)\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/","title":"merge","text":""},{"location":"reference/shoal/dev_boards/merge/app/","title":"app","text":"<p>A Textual Dashboard app for managing PRs.</p>"},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app-attributes","title":"Attributes","text":""},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app-classes","title":"Classes","text":""},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app.DebugLog","title":"DebugLog","text":"<p>             Bases: <code>RichLog</code></p> <p>Debug log widget.</p> Source code in <code>shoal/dev_boards/merge/app.py</code> <pre><code>@beartype\nclass DebugLog(RichLog):\n    \"\"\"Debug log widget.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\n    #debug-log {\n        dock: bottom;\n        height: 10%;\n    }\n    \"\"\"\n\n    _text_logs = cycle(['debug-log', None])\n\n    def compose(self) -&gt; ComposeResult:\n        super().compose()\n        with ContentSwitcher(id='logs', initial=None):\n            yield RichLog(id='debug-log', markup=True, highlight=True)\n\n    # Override the logger to point to the debug-log\n    def _app_printer(\n        self,\n        message: str,\n        *,\n        is_header: bool,\n        _this_level: int,\n        _is_text: bool,\n        # Logger-specific parameters that need to be initialized with partial(...)\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"App Log Writer.\"\"\"\n        values = ' '.join([f'{key}={value}' for key, value in kwargs.items()])\n        log = self.query_one('#debug-log', RichLog)\n        if is_header:\n            log.write('')\n        log.write(f'{message} {values}'.strip())\n\n    def _on_mount(self, event: Mount) -&gt; None:\n        super()._on_mount(event)\n        # Mount the logger to the debug log\n        configure_logger(log_level=logging.DEBUG, logger=self._app_printer)\n\n    def action_toggle_text_log(self) -&gt; None:\n        text_log_id = next(self._text_logs)\n        new_id = self.query_one(f'#{text_log_id}', RichLog).id if text_log_id else None\n        self.query_one('#logs', ContentSwitcher).current = new_id\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app.MergeApp","title":"MergeApp","text":"<p>             Bases: <code>App</code></p> <p>A Textual Dashboard app for managing PRs.</p> Source code in <code>shoal/dev_boards/merge/app.py</code> <pre><code>@beartype\nclass MergeApp(App):  # type: ignore[type-arg]\n    \"\"\"A Textual Dashboard app for managing PRs.\"\"\"\n\n    TITLE = 'GitOps: Merge UI'\n\n    BINDINGS: ClassVar[list[Binding]] = [  # type: ignore[assignment]\n        Binding('q', 'quit', 'Quit'),\n        Binding('`', 'toggle_text_log', 'Toggle Debug Log'),\n        # PLANNED: Add question mark for a help menu\n    ]\n\n    def compose(self) -&gt; ComposeResult:  # noqa: PLR6301\n        \"\"\"Called to add widgets to the app.\"\"\"\n        header = Header()\n        header.tall = True\n        yield header\n        yield Footer()\n        yield PRsDataTable(id='datatable')\n        yield DebugLog()\n\n    def _get_table(self) -&gt; PRsDataTable:\n        return self.query_one('#datatable', PRsDataTable)\n\n    def action_toggle_text_log(self) -&gt; None:\n        self.query_one(DebugLog).action_toggle_text_log()\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app.MergeApp-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app.MergeApp.compose","title":"compose","text":"<pre><code>compose()\n</code></pre> <p>Called to add widgets to the app.</p> Source code in <code>shoal/dev_boards/merge/app.py</code> <pre><code>def compose(self) -&gt; ComposeResult:  # noqa: PLR6301\n    \"\"\"Called to add widgets to the app.\"\"\"\n    header = Header()\n    header.tall = True\n    yield header\n    yield Footer()\n    yield PRsDataTable(id='datatable')\n    yield DebugLog()\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app.PRsDataTable","title":"PRsDataTable","text":"<p>             Bases: <code>DataTable</code></p> <p>GitHub PRs Table.</p> Source code in <code>shoal/dev_boards/merge/app.py</code> <pre><code>@beartype\nclass PRsDataTable(DataTable):  # type: ignore[type-arg]\n    \"\"\"GitHub PRs Table.\"\"\"\n\n    _columns = PRColumns\n\n    BINDINGS: ClassVar[list[Binding]] = [  # type: ignore[assignment]\n        Binding('r', 'refresh_rows', 'Refresh Data'),\n        Binding('o', 'open_selected_pr', 'Open in Browser'),\n        Binding('m', 'merge_selected_pr', 'Merge'),\n        Binding('s', 'squash_selected_pr', 'Squash'),\n        Binding('k', 'cursor_up', 'Cursor Up', show=False),\n        Binding('j', 'cursor_down', 'Cursor Down', show=False),\n    ]\n\n    def _get_selected_row(self) -&gt; dict:  # type: ignore[type-arg]\n        row = self.get_row_at(self.cursor_coordinate.row)\n        return dict(zip(self._columns, row, strict=True))\n\n    def on_mount(self) -&gt; None:\n        super().on_mount()  # type: ignore[no-untyped-call]\n        self.cursor_type = 'row'\n        self.zebra_stripes = True\n        self.add_columns(*self._columns)\n        asyncio.run(self.action_refresh_rows())\n\n    async def action_refresh_rows(self) -&gt; None:\n        self.clear()\n        df_prs = await list_prs()\n        self.add_rows(df_prs.itertuples(index=False))\n\n    async def action_open_selected_pr(self) -&gt; None:\n        row_data = self._get_selected_row()\n        await open_pr(repository=row_data[PRsSchema.repository], pr_id=row_data[PRsSchema.number])\n\n    async def action_merge_selected_pr(self) -&gt; None:\n        row_data = self._get_selected_row()\n        await merge_pr(repository=row_data[PRsSchema.repository], pr_id=row_data[PRsSchema.number], use_squash=False)\n\n    async def action_squash_selected_pr(self) -&gt; None:\n        row_data = self._get_selected_row()\n        await merge_pr(repository=row_data[PRsSchema.repository], pr_id=row_data[PRsSchema.number], use_squash=True)\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/app/#shoal.dev_boards.merge.app-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/merge/config/","title":"config","text":"<p>Merge Config.</p>"},{"location":"reference/shoal/dev_boards/merge/config/#shoal.dev_boards.merge.config-classes","title":"Classes","text":""},{"location":"reference/shoal/dev_boards/merge/config/#shoal.dev_boards.merge.config.Config","title":"Config","text":"<p>             Bases: <code>BaseModel</code></p> <p>Merge Config.</p> Source code in <code>shoal/dev_boards/merge/config.py</code> <pre><code>class Config(BaseModel):\n    \"\"\"Merge Config.\"\"\"\n\n    search_kwargs: Dict[str, str]\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/config/#shoal.dev_boards.merge.config-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/merge/config/#shoal.dev_boards.merge.config.get_config","title":"get_config  <code>cached</code>","text":"<pre><code>get_config()\n</code></pre> <p>Load the user configuration data.</p> Source code in <code>shoal/dev_boards/merge/config.py</code> <pre><code>@lru_cache(maxsize=1)\n@beartype\ndef get_config() -&gt; Config:\n    \"\"\"Load the user configuration data.\"\"\"\n    return Config(\n        search_kwargs={'author': '@me', 'review': 'approved', 'state': 'open'},\n    )\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/","title":"gh_wrapper","text":"<p>GH CLI wrapper.</p>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper-attributes","title":"Attributes","text":""},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.PRColumns","title":"PRColumns  <code>module-attribute</code>","text":"<pre><code>PRColumns = [*PRsSchema._collect_fields()]\n</code></pre> <p>Ordered columns for the dataframe returned from <code>list_prs</code>.</p>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper-classes","title":"Classes","text":""},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.PRsSchema","title":"PRsSchema","text":"<p>             Bases: <code>SchemaModel</code></p> <p>Pandera Schema for the PRs DataFrame.</p> Source code in <code>shoal/dev_boards/merge/gh_wrapper.py</code> <pre><code>class PRsSchema(pa.SchemaModel):\n    \"\"\"Pandera Schema for the PRs DataFrame.\"\"\"\n\n    number: Series[str]\n    repository: Series[str]\n    title: Series[str]\n    createdAt: Series[np.datetime64]  # noqa: N815\n    updatedAt: Series[np.datetime64]  # noqa: N815\n    commentsCount: Series[int]  # noqa: N815\n    state: Series[str]  # = pa.Field(nullable=True)\n    isDraft: Series[bool]  # noqa: N815\n    isLocked: Series[bool]  # noqa: N815\n\n    class BaseConfig:\n        \"\"\"Pandera Config.\"\"\"\n\n        strict = True\n        coerce = True\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.PRsSchema-classes","title":"Classes","text":""},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.PRsSchema.BaseConfig","title":"BaseConfig","text":"<p>Pandera Config.</p> Source code in <code>shoal/dev_boards/merge/gh_wrapper.py</code> <pre><code>class BaseConfig:\n    \"\"\"Pandera Config.\"\"\"\n\n    strict = True\n    coerce = True\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.list_prs","title":"list_prs  <code>async</code>","text":"<pre><code>list_prs()\n</code></pre> <p>Return a dataframe of all PRs.</p> Source code in <code>shoal/dev_boards/merge/gh_wrapper.py</code> <pre><code>@beartype\n@pa.check_output(PRsSchema)  # type: ignore[arg-type]\nasync def list_prs() -&gt; pd.DataFrame:\n    \"\"\"Return a dataframe of all PRs.\"\"\"\n    config = get_config()\n    gh_cli_args = []\n    for key, value in config.search_kwargs.items():\n        gh_cli_args += [f'--{key}', str(value)]\n    joined_args = shlex.join(gh_cli_args)\n    cmd = f\"gh search prs --json='{','.join(PRColumns)}' --sort=updated --order=desc --limit=30 {joined_args}\"\n    output = await capture_shell_async(cmd)\n    records = []\n    for record in json.loads(output):\n        repo = record.pop('repository')\n        record[PRsSchema.repository] = repo['nameWithOwner']\n        records.append({key: record[key] for key in PRColumns})\n    df_prs = pd.DataFrame(records)\n    return df_prs.sort_values(by=[PRsSchema.updatedAt], ascending=False)\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.merge_pr","title":"merge_pr  <code>async</code>","text":"<pre><code>merge_pr(*, repository, pr_id, use_squash)\n</code></pre> <p>Merge the PR.</p> Source code in <code>shoal/dev_boards/merge/gh_wrapper.py</code> <pre><code>@beartype\nasync def merge_pr(*, repository: str, pr_id: int, use_squash: bool) -&gt; Optional[str]:\n    \"\"\"Merge the PR.\"\"\"\n    opt_flags = '--squash' if use_squash else ''\n    return await _safe_cmd(cmd=f\"gh pr merge {pr_id} --repo='{repository}' --body='' {opt_flags}\")\n</code></pre>"},{"location":"reference/shoal/dev_boards/merge/gh_wrapper/#shoal.dev_boards.merge.gh_wrapper.open_pr","title":"open_pr  <code>async</code>","text":"<pre><code>open_pr(*, repository, pr_id)\n</code></pre> <p>Open the PR using the GH CLi.</p> Source code in <code>shoal/dev_boards/merge/gh_wrapper.py</code> <pre><code>@beartype\nasync def open_pr(*, repository: str, pr_id: int) -&gt; Optional[str]:\n    \"\"\"Open the PR using the GH CLi.\"\"\"\n    return await _safe_cmd(cmd=f\"gh pr view {pr_id} --repo='{repository}' --web\")\n</code></pre>"},{"location":"reference/shoal/dev_boards/tasks/","title":"tasks","text":""},{"location":"reference/shoal/dev_boards/tasks/all_tasks/","title":"all_tasks","text":"<p>Configure CLI \u2018tasks\u2019.</p>"},{"location":"reference/shoal/dev_boards/tasks/all_tasks/#shoal.dev_boards.tasks.all_tasks-classes","title":"Classes","text":""},{"location":"reference/shoal/dev_boards/tasks/all_tasks/#shoal.dev_boards.tasks.all_tasks-functions","title":"Functions","text":""},{"location":"reference/shoal/dev_boards/tasks/all_tasks/#shoal.dev_boards.tasks.all_tasks.merge","title":"merge","text":"<pre><code>merge(_ctx)\n</code></pre> <p>Merge Task.</p> Source code in <code>shoal/dev_boards/tasks/all_tasks.py</code> <pre><code>@task()  # type: ignore[misc]\ndef merge(_ctx: Context) -&gt; None:\n    \"\"\"Merge Task.\"\"\"\n    MergeApp().run()\n</code></pre>"}]}